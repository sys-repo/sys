import { Measure } from './mod.ts';
import { Dev, type t } from '../../test.ui/mod.ts';

type T = {
  props?: t.MeasureSizeProps;
  size?: t.Size;
};
const initial: T = {};

export default Dev.describe('MeasureSize', (e) => {
  e.it('init', async (e) => {
    const ctx = Dev.ctx(e);
    await ctx.state<T>(initial);
  });

  e.it('ui:debug', async (e) => {
    const dev = Dev.tools<T>(e, initial);
    const state = await dev.ctx.state<T>(initial);

    dev.footer
      .border(-0.1)
      .render<T>((e) => <Dev.Object name={'result'} data={e.state} expand={5} />);

    const measure = async (props: t.MeasureSizeProps) => {
      const size = await Measure.size(props);
      state.change((data) => {
        data.size = size;
        data.props = { ...props };
      });
    };

    dev.title('Measure <Component> Size').hr();
    dev.button('measure: "hello"', () => measure({ content: 'hello' }));
    dev.button('measure: "hello" (big)', () => measure({ content: 'hello', fontSize: 90 }));
    dev.hr();
  });
});
